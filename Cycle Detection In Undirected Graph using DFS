// code in DFS


// #include<unordered_map>
// #include<queue>
// #include<list>

#include<unordered_map>
#include<queue>
#include<list>

bool isCycleDFS(int src ,int parent, unordered_map<int,bool> &visited, unordered_map<int ,list<int> > &adj)

{
    visited[src] = true;

        for(auto neibhour : adj[src])
        {
        

            if(!visited[neibhour])
            {
                bool cycleDetected= isCycleDFS(neibhour,src,visited, adj);
                if(cycleDetected)
                  return true;
            }

            else if(neibhour != parent)
            {
                return true;
            }
        }
    
  return false;

}



string cycleDetection (vector<vector<int>>& edges, int n, int m)
{
    // create adjancency list 

    unordered_map<int , list<int>> adj;

    for(int i =0; i< m ; i++)
    {
        int u= edges[i][0];
        int v = edges[i][1];

        adj[u].push_back(v);
        adj[v].push_back(u);
    }

    // to handle disconnected components

      unordered_map<int,bool> visited;


    for(int i = 0; i<n; i++)
    {
        if(!visited[i])
        {
            bool ans = isCycleDFS(i,-1, visited,adj);

            if(ans == 1)
              return "Yes";
        }
    }

    return "No";
}
