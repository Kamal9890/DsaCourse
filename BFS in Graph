//code 


#include <bits/stdc++.h> 
#include<unordered_map>
#include<queue>
#include<list>
#include<set>

void prepareAdjList(unordered_map<int,set<int>> &adjlist ,  vector<pair<int, int>> &edges)
{
    for(int i = 0; i < edges.size(); i++)
    {
        int u = edges[i].first;
        int v = edges[i].second;

        adjlist[u].insert(v);
        adjlist[v].insert(u);

    }
}

void bfs(unordered_map<int,set<int>> &adjlist , unordered_map<int,bool> &visi,vector<int> &ans ,
 int node)
{
    queue<int> q;
    q.push(node);

    visi[node] = 1;

    while(!q.empty())
    {
        int frontNode = q.front();
        q.pop();

        //store frontNode into ans;

        ans.push_back(frontNode);

        // treverse all neighbours of frontNode 

        for(auto i : adjlist[frontNode])
        {
            if(!visi[i])
            {
                q.push(i);
                visi[i] =1;
            }
        }
    }
}

vector<int> BFS(int vertex, vector<pair<int, int>> edges)
{
     unordered_map<int,set<int>> adjlist;

     vector<int> ans;

     unordered_map<int,bool> visi;

     prepareAdjList(adjlist, edges);

     // traverse all component of a graph 

     for(int i  = 0; i<vertex; i++)
     {
         if(!visi[i])
         {
             bfs(adjlist,visi,ans,i);

         }
     }

     return ans;
}
