// code 

//{ Driver Code Starts
#include <bits/stdc++.h>
using namespace std;

// } Driver Code Ends
class Solution {
  public:
  
  const int row[8] = {0,0,-1,1,-1,1,1,-1};
  
  const int clm[8] = {1,-1,0,0,1,-1,1,-1};
  
  void solve(vector<vector<char>>& grid, int i, int j)
  {
      if((i <0 || j<0 || i >= grid.size() || j>=grid[0].size()) || grid[i][j] != '1')
        return;
        
    grid[i][j] ='0';
    
    for(int k = 0; k<8; k++)
    {
        solve(grid,i+row[k] , j+clm[k]);
    }
  }
  
  
    // Function to find the number of islands.
    int numIslands(vector<vector<char>>& grid) {
        // Code here
        
        int n = grid.size() , m = grid[0].size();
        
        int ans = 0;
        
        for(int i =0; i<n; i++)
        {
            for(int j =0; j<m; j++)
            {
                if(grid[i][j] == '1')
                {
                    solve(grid,i,j);
                    ans++;
                }
            }

        }
        
        return ans;
    }
};

//{ Driver Code Starts.
int main() {
    int tc;
    cin >> tc;
    while (tc--) {
        int n, m;
        cin >> n >> m;
        vector<vector<char>> grid(n, vector<char>(m, '#'));
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                cin >> grid[i][j];
            }
        }
        Solution obj;
        int ans = obj.numIslands(grid);
        cout << ans << '\n';
    }
    return 0;
}
// } Driver Code Ends
