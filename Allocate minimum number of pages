// code 

//{ Driver Code Starts
// Initial template for C++

#include<bits/stdc++.h>
using namespace std;


// } Driver Code Ends
//User function template in C++

class Solution 
{
    public:
    
    bool isAllocationPossible(int barrier , int arr[] , int n , int st)
    {
        int aS = 1, pages = 0;
        
        for(int i =0 ; i< n; i++)
        {
            if(arr[i] > barrier) 
            return false;
            
            if(pages + arr[i] > barrier)
            {
                aS++;
                pages = arr[i];
            }
            
            else
            pages += arr[i];
        }
        
        if(aS > st)
          return false;
          
          return true;
    }
    //Function to find minimum number of pages.
    int findPages(int A[], int N, int M) 
    {
        //code here
        
        if(N < M)
        
        return -1;
        
        int low = A[0] , high = 0;
        
        for(int i = 0; i< N; i++)
        {
            high += A[i];
            
            if(A[i] < low )
            low = A[i];
        }
        
        int mid , res = -1;
        
        while(low <= high)
        {
            mid  = (low +high) >>1;
            if( isAllocationPossible(mid,A,N,M))
            {
                res = mid;
                high = mid-1;
                
                
            }
            
            else
              low = mid+1;
        }
        
        return low;
    }
};

//{ Driver Code Starts.

int main() {
    int t;
    cin>>t;
    while(t--){
        int n;
        cin>>n;
        int A[n];
        for(int i=0;i<n;i++){
            cin>>A[i];
        }
        int m;
        cin>>m;
        Solution ob;
        cout << ob.findPages(A, n, m) << endl;
    }
    return 0;
}

// } Driver Code Ends
