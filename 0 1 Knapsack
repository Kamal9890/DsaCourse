#include <bits/stdc++.h> 
#include<vector>

int solve(vector<int> &weight, vector<int> &value, int index,  int capacity)


{
	//base case 

	if(index == 0)
	{
          if (weight[0] <= capacity) 
            return value[0];
          

		  else
		  
			  return 0;
		  
    }

   int incl = 0;

	if(weight[index] <= capacity)
	   incl =value[index] + solve(weight, value, index-1 , capacity - weight[index]);

     
	int excl  =  0+ solve(weight , value, index -1 , capacity);

	 int ans = max(incl , excl);

	 return ans;

}


int solveMem(vector<int> &weight, vector<int> &value, int index, int capacity,vector<vector<int>>  &dp)


{
	//base case 

	if(index == 0)
	{
          if (weight[0] <= capacity) 
            return value[0];
          

		  else
		  
			  return 0;
		  
    }


	if(dp[index][capacity] != -1)
	    return dp[index][capacity];

   int incl = 0;

	if(weight[index] <= capacity)
	   incl =value[index] + solveMem(weight, value, index-1 , capacity - weight[index],dp);

     
	int excl  =  0+ solveMem(weight , value, index -1 , capacity,dp);

	 dp[index][capacity] = max(incl , excl);

	 return dp[index][capacity];

}



int solveTab(vector<int> &weight, vector<int> &value, int n, int capacity)


{
	//base case 

	vector<vector<int>>  dp(n, vector<int> (capacity+1,0));

	// step 2
        for (int w = weight[0]; w <= capacity; w++) {
          if (weight[0] <= capacity)
            dp[0][w] = value[0];

          else
            dp[0][w] = 0;
        }

		for(int index =1; index <n; index++)
		{
			for(int w = 0; w <= capacity; w++)
			{
				 int incl = 0;

	           if(weight[index] <= w)
	              incl =value[index] + dp[index -1][w - weight[index]];
     
	              int excl  =  0 + dp[index-1][w];

	               dp[index][w] = max(incl , excl);

	
			}
		}

		 return dp[n-1][capacity];
}


// space optimization 


int solveTabSo(vector<int> &weight, vector<int> &value, int n, int capacity)


{
	//base case 



	vector<int> prev(capacity +1, 0);
	vector<int> curr(capacity +1 ,  0);

	// step 2
        for (int w = weight[0]; w <= capacity; w++) {
          if (weight[0] <= capacity)
            prev[w] = value[0];

          else
            prev[w] = 0;
        }

		for(int index =1; index <n; index++)
		{
			for(int w = 0; w <= capacity; w++)
			{
				 int incl = 0;

	           if(weight[index] <= w)
	              incl =value[index] + prev[w - weight[index]];
     
	              int excl  =  0 + prev[w];

	               curr[w] = max(incl , excl);

	
			}
			prev =curr;
		}

		 return prev[capacity];
}







int knapsack(vector<int> weight, vector<int> value, int n, int maxWeight) 
{
	// Write your code here

	// return solve(weight , value, n -1 , maxWeight);


	// vector<vector<int>>  dp(n , vector<int> (maxWeight +1,-1));

	//  return solveMem(weight , value, n -1 , maxWeight , dp);

	return solveTabSo(weight , value, n , maxWeight );
}
