//code 
'
//{ Driver Code Starts
//Initial Template for C++
#include <bits/stdc++.h>
using namespace std;

// } Driver Code Ends
//User function Template for C++
class Solution
{
public:
   
   void solveDfs(int k , string prev , unordered_set<string> &watch , vector<int> &edGes)
{
    for(int i =0; i<k; i++)
   {
       string curr = prev;
       
       curr+=(i+'0');
       
       if(watch.find(curr) == watch.end())
       {
           watch.insert(curr);
       
       
       solveDfs(k,curr.substr(1),watch,edGes);
       edGes.push_back(i);
       }
   }
}
    string findString(int n, int k) {
        // code here
        
        unordered_set<string> watch;
        
        string sNode = string(n-1, '0');
        
        vector<int> edGes;
        
        solveDfs(k,sNode,watch,edGes);
        
        string rat;
        
        int low = pow(k,n);
        
        for(int i =0; i<low; i++)
        {
            rat+=(edGes[i] +'0');
        }
        
        rat += sNode;
        return rat;
    }
};

//{ Driver Code Starts.
int main()
{
    int t;
    cin >> t;
    while (t--) {
        int N,K;
        cin>>N>>K;
        Solution ob;
        string ans = ob.findString(N, K);
        int ok=1;
        for(auto i:ans){
            if(i<'0'||i>K-1+'0')
                ok=0;
        }
        if(!ok){
            cout<<-1<<endl;
            continue;
        }
        unordered_set<string> st;
        for(int i=0;i+N-1<ans.size();i++){
            st.insert(ans.substr(i,N));
        }
        int tot=1;
        for(int i=1;i<=N;i++)
            tot*=K;
        if(st.size()==tot)
        {
            cout<<ans.size()<<endl;
        }
        else{
            cout<<-1<<endl;
        }
    }
    return 0;
} 
// } Driver Code Ends
